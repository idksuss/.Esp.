local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local localPlayer = Players.LocalPlayer
local isDrawingSupported = false
local FOVCircle

-- FOV Circle Settings
_G.CircleSides = 64 -- Number of sides of the FOV circle.
_G.CircleColor = Color3.fromRGB(255, 255, 255) -- Color of the FOV circle.
_G.CircleTransparency = 1 -- Transparency of the circle.
_G.CircleRadius = 100 -- Radius of the FOV circle.
_G.CircleFilled = false -- Determines if the circle is filled.
_G.CircleVisible = false -- Determines if the circle is visible.
_G.CircleThickness = 2 -- Thickness of the circle.

_G.AutoClickEnabled = false  -- Enable/Disable auto-click (right mouse button)
_G.LeftClickEnabled = false  -- Enable/Disable single shot (left mouse button)
_G.LockCameraEnabled = false  -- Enable/Disable camera lock on enemy's head

-- Check if `Drawing.new()` is supported
local success, _ = pcall(function() return Drawing.new("Circle") end)
if success then
    isDrawingSupported = true
end

if isDrawingSupported then
    -- ✅ Use `Drawing.new()` if supported
    FOVCircle = Drawing.new("Circle")
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    FOVCircle.Radius = _G.CircleRadius
    FOVCircle.Filled = _G.CircleFilled
    FOVCircle.Color = _G.CircleColor
    FOVCircle.Visible = _G.CircleVisible
    FOVCircle.Transparency = _G.CircleTransparency
    FOVCircle.Thickness = _G.CircleThickness
    FOVCircle.NumSides = _G.CircleSides
else
    -- ❌ `Drawing.new()` NOT Supported → Use GUI instead
    warn("[INFO] `Drawing.new()` is not supported! Switching to GUI FOV Circle.")
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = game:GetService("CoreGui") or localPlayer:FindFirstChildOfClass("PlayerGui")

    local CircleFrame = Instance.new("Frame")
    CircleFrame.Parent = ScreenGui
    CircleFrame.Size = UDim2.new(0, _G.CircleRadius * 2, 0, _G.CircleRadius * 2)
    CircleFrame.Position = UDim2.new(0.5, -_G.CircleRadius, 0.5, -_G.CircleRadius)
    CircleFrame.BackgroundTransparency = _G.CircleTransparency
    CircleFrame.BackgroundColor3 = _G.CircleColor
    CircleFrame.Visible = _G.CircleVisible

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(1, 0) -- Makes it a perfect circle
    UICorner.Parent = CircleFrame

    FOVCircle = CircleFrame
end

-- Function to check if the lobby UI is visible
local function isLobbyVisible()
    local lobby = localPlayer.PlayerGui:FindFirstChild("MainGui")
    if lobby then
        local mainFrame = lobby:FindFirstChild("MainFrame")
        if mainFrame then
            local currency = mainFrame:FindFirstChild("Lobby") and mainFrame.Lobby:FindFirstChild("Currency")
            return currency and currency.Visible or false
        end
    end
    return false
end

-- Function to get the closest player to the mouse
local function getClosestPlayerToMouse()
    local closestPlayer = nil
    local shortestDistance = math.huge
    local mousePosition = UserInputService:GetMouseLocation()

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local headPosition, onScreen = Camera:WorldToViewportPoint(head.Position)

            if onScreen then
                local screenPosition = Vector2.new(headPosition.X, headPosition.Y)
                local distance = (screenPosition - mousePosition).Magnitude

                if distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock camera to the closest enemy's head
local function lockCameraToHead()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        local headPosition, onScreen = Camera:WorldToViewportPoint(head.Position)
        
        -- Check if the enemy is within the FOV circle's radius
        local mousePosition = UserInputService:GetMouseLocation()
        local distanceToMouse = (Vector2.new(headPosition.X, headPosition.Y) - mousePosition).Magnitude
        
        if distanceToMouse <= _G.CircleRadius then
            if headPosition.Z > 0 then
                local cameraPosition = Camera.CFrame.Position
                Camera.CFrame = CFrame.new(cameraPosition, head.Position)
            end
        end
    end
end

-- Start Auto Click Function
local function startAutoClick()
    if autoClickConnection then
        autoClickConnection:Disconnect()
    end
    autoClickConnection = RunService.Heartbeat:Connect(function()
        if isRightMouseDown and _G.AutoClickEnabled then
            if not isLobbyVisible() then
                mouse1click()
            end
        end
    end)
end

-- Stop Auto Click Function
local function stopAutoClick()
    if autoClickConnection then
        autoClickConnection:Disconnect()
    end
end

-- Input Detection
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and not isProcessed and _G.LeftClickEnabled then
        if not isLeftMouseDown then
            isLeftMouseDown = true
            if not isLobbyVisible() then
                mouse1click()
            end
        end
    elseif input.UserInputType == Enum.UserInputType.MouseButton2 and not isProcessed and _G.AutoClickEnabled then
        if not isRightMouseDown then
            isRightMouseDown = true
            startAutoClick()
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, isProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and not isProcessed then
        isLeftMouseDown = false
    elseif input.UserInputType == Enum.UserInputType.MouseButton2 and not isProcessed then
        isRightMouseDown = false
        stopAutoClick()
    end
end)

-- Update Loop
RunService.Heartbeat:Connect(function()
    if not isLobbyVisible() then
        targetPlayer = getClosestPlayerToMouse()
        if targetPlayer and _G.LockCameraEnabled then
            lockCameraToHead()
        end
    end

    -- Update FOV Circle
    local mousePosition = UserInputService:GetMouseLocation()

    if isDrawingSupported then
        -- ✅ Update `Drawing.new()` Circle
        FOVCircle.Position = mousePosition
        FOVCircle.Radius = _G.CircleRadius
        FOVCircle.Filled = _G.CircleFilled
        FOVCircle.Color = _G.CircleColor
        FOVCircle.Visible = _G.CircleVisible
        FOVCircle.Transparency = _G.CircleTransparency
        FOVCircle.Thickness = _G.CircleThickness
        FOVCircle.NumSides = _G.CircleSides
    else
        -- ✅ Update GUI Circle (for unsupported executors)
        FOVCircle.Size = UDim2.new(0, _G.CircleRadius * 2, 0, _G.CircleRadius * 2)
        FOVCircle.Position = UDim2.new(0, mousePosition.X - _G.CircleRadius, 0, mousePosition.Y - _G.CircleRadius)
        FOVCircle.BackgroundTransparency = _G.CircleTransparency
        FOVCircle.BackgroundColor3 = _G.CircleColor
        FOVCircle.Visible = _G.CircleVisible
    end
end)
