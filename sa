local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local localPlayer = Players.LocalPlayer

local targetPlayer = nil
local isLeftMouseDown = false
local isRightMouseDown = false
local autoClickConnection = nil
local touchHeld = false -- For mobile touch support

-- FOV Circle Settings
_G.CircleSides = 64
_G.CircleColor = Color3.fromRGB(255, 255, 255)
_G.CircleTransparency = 1
_G.CircleRadius = 100
_G.CircleFilled = false
_G.CircleVisible = false
_G.CircleThickness = 2

_G.AutoClickEnabled = false  
_G.LeftClickEnabled = false  
_G.LockCameraEnabled = false  

-- Create FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = _G.CircleRadius
FOVCircle.Filled = _G.CircleFilled
FOVCircle.Color = _G.CircleColor
FOVCircle.Visible = _G.CircleVisible
FOVCircle.Transparency = _G.CircleTransparency
FOVCircle.Thickness = _G.CircleThickness

if FOVCircle and FOVCircle.ClassName == "Circle" then
    FOVCircle.NumSides = _G.CircleSides
end

-- Function to check if the lobby UI is visible
local function isLobbyVisible()
    local lobby = localPlayer.PlayerGui:FindFirstChild("MainGui")
    if lobby then
        local mainFrame = lobby:FindFirstChild("MainFrame")
        if mainFrame then
            local currency = mainFrame:FindFirstChild("Lobby") and mainFrame.Lobby:FindFirstChild("Currency")
            return currency and currency.Visible or false
        end
    end
    return false
end

-- Function to get the closest player to the crosshair/touch input
local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge
    local inputPosition = UserInputService:GetMouseLocation()

    -- Mobile: Use touch position if available
    if UserInputService.TouchEnabled then
        local touchInput = UserInputService:GetLastInputForType(Enum.UserInputType.Touch)
        if touchInput then
            inputPosition = Vector2.new(touchInput.Position.X, touchInput.Position.Y)
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local headPosition, onScreen = Camera:WorldToViewportPoint(head.Position)

            if onScreen then
                local screenPosition = Vector2.new(headPosition.X, headPosition.Y)
                local distance = (screenPosition - inputPosition).Magnitude

                if distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock camera to enemy's head (For Silent Aim)
local function lockCameraToHead()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        local headPosition, onScreen = Camera:WorldToViewportPoint(head.Position)

        if headPosition.Z > 0 then
            local cameraPosition = Camera.CFrame.Position
            Camera.CFrame = CFrame.new(cameraPosition, head.Position)
        end
    end
end

-- Safe Left Click Using VirtualInputManager
local function safeLeftClick()
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0) -- Left Click Down
    task.wait() -- Small delay to prevent spamming
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0) -- Left Click Up
end

-- Start Auto Click Function
local function startAutoClick()
    if autoClickConnection then
        autoClickConnection:Disconnect()
    end
    autoClickConnection = RunService.Heartbeat:Connect(function()
        if (isRightMouseDown or touchHeld) and _G.AutoClickEnabled then
            if not isLobbyVisible() then
                safeLeftClick()
            end
        end
    end)
end

-- Stop Auto Click Function
local function stopAutoClick()
    if autoClickConnection then
        autoClickConnection:Disconnect()
    end
end

-- Input Detection (PC & Mobile)
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if isProcessed then return end

    -- Left Click (PC) or Tap (Mobile)
    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and _G.LeftClickEnabled then
        if not isLeftMouseDown then
            isLeftMouseDown = true
            touchHeld = true
            if not isLobbyVisible() then
                safeLeftClick()
            end
        end
    end

    -- Right Click (PC)
    if input.UserInputType == Enum.UserInputType.MouseButton2 and _G.AutoClickEnabled then
        if not isRightMouseDown then
            isRightMouseDown = true
            startAutoClick()
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, isProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isLeftMouseDown = false
    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightMouseDown = false
        stopAutoClick()
    elseif input.UserInputType == Enum.UserInputType.Touch then
        touchHeld = false
        stopAutoClick()
    end
end)

-- Update Loop
RunService.Heartbeat:Connect(function()
    if not isLobbyVisible() then
        targetPlayer = getClosestPlayer()
        if targetPlayer and _G.LockCameraEnabled then
            lockCameraToHead()
        end
    end

    -- Update FOV Circle
    local inputPosition = UserInputService:GetMouseLocation()
    if UserInputService.TouchEnabled then
        local touchInput = UserInputService:GetLastInputForType(Enum.UserInputType.Touch)
        if touchInput then
            inputPosition = Vector2.new(touchInput.Position.X, touchInput.Position.Y)
        end
    end

    FOVCircle.Position = inputPosition
    FOVCircle.Radius = _G.CircleRadius
    FOVCircle.Filled = _G.CircleFilled
    FOVCircle.Color = _G.CircleColor
    FOVCircle.Visible = _G.CircleVisible
    FOVCircle.Transparency = _G.CircleTransparency
    FOVCircle.Thickness = _G.CircleThickness

    -- Ensure NumSides is applied only to Circles
    if FOVCircle and FOVCircle.ClassName == "Circle" then
        FOVCircle.NumSides = _G.CircleSides
    end
end)
